openapi: 3.0.2
info:
  title: Library service API
  description: 'API used to add, remove and get books from the library. Also to manage who has which book in their position and when they should be returned.'
  version: 0.0.1
servers:
  - url: http://localhost:2001/
    description: Library API Service

components:
  schemas:
    Book:
      required:
      - name
      - authors
      type: object
      properties:
        name:
          type: string
        authors:
          type: array
          items:
            type: string
        publisher:
          type: string
        genre:
          type: string
        description:
          type: string
        date_of_release:
          type: string
          format: date
          pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/
          example: "2019-05-17"
    Borrow_book:
      required:
        - "borrower"
        - "book"
        - "borrowed_date"
        - "return_date"
      type: object
      properties:
        borrower:
          type: string
        book:
          type: string
        borrowed_date:
          type: string
          format: date
          pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/
          example: "2019-05-17"
        return_date:
          type: string
          format: date
          pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/
          example: "2019-05-17"
    inline_response_400:
      type: object
      properties:
        message:
          type: string
    inline_response_200:
      type: object
      properties:
        message:
          type: string
  
  responses:
    "200":
      description: OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_200'
    "201":
      description: Book created and added successfully to the DB
    "400":
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_400'
    "403":
      description: Unauthorized functionnality
    "404":
      description: Book not found
  
  securitySchemes:
    jwtAuth:       
      type: http
      scheme: bearer
      bearerFormat: JWT 

  parameters:
    PageLimit:
      name: limit
      in: query
      description: Limits the number of items on a page
      required: false
      style: form
      explode: true
      schema:
        type: integer
    PageOffset:
      name: offset
      in: query
      description: Specifies the page number of the items to be displayed
      required: false
      style: form
      explode: true
      schema:
        type: integer
    BookName: 
      name: book_name
      in: path
      required: true
      style: simple
      explode: false
      schema:
        type: string


paths:
  /book/{book_name}:  # get or remove a book from the library
    parameters:
    - $ref: "#/components/parameters/BookName"
    get:
      description: get a book from the library database
      operationId: get_book
      tags:
      - books
      responses:
        '200':
          $ref: "#/components/responses/200"
        '404':
          $ref: "#/components/responses/404"
    delete:
      description: Delete book from the library database
      operationId: delete_book
      tags:
      - books
      security: # auth header
        - jwtAuth: []
      responses:
        '200':
          $ref: "#/components/responses/200"
        '403':
          $ref: "#/components/responses/403"
  /book/add:
    post: 
      description: Add a book to the library
      operationId: Add book
      tags:
      - books
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      security: # auth header
        - jwtAuth: []
      responses:
        '201':
          $ref: "#/components/responses/201"
        '400':
          $ref: "#/components/responses/400"
  /books: # returns list books of the library sorted in alphabetical order
    get:
      description: Gets a list of books in alphabetical order
      operationId: get_books_list
      tags:
      - books
      parameters:
      - $ref: "#/components/parameters/PageLimit"
      - $ref: "#/components/parameters/PageOffset"
      responses:
        '200':
          description: Returned books successfully
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '400':
          $ref: "#/components/responses/400"
  # /borrow/{book_name}: # user borrows a book
  #   get: # returns info on the borrowing of the book (if borrowed)
  #   delete: # delete borrowed entry

  # /borrow/add:
  #   post: # add a borrowing entry


    
        
