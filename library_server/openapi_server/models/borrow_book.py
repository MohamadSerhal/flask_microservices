# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class BorrowBook(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, borrower=None, book=None, borrowed_date=None, return_date=None):  # noqa: E501
        """BorrowBook - a model defined in OpenAPI

        :param borrower: The borrower of this BorrowBook.  # noqa: E501
        :type borrower: str
        :param book: The book of this BorrowBook.  # noqa: E501
        :type book: str
        :param borrowed_date: The borrowed_date of this BorrowBook.  # noqa: E501
        :type borrowed_date: date
        :param return_date: The return_date of this BorrowBook.  # noqa: E501
        :type return_date: date
        """
        self.openapi_types = {
            'borrower': str,
            'book': str,
            'borrowed_date': date,
            'return_date': date
        }

        self.attribute_map = {
            'borrower': 'borrower',
            'book': 'book',
            'borrowed_date': 'borrowed_date',
            'return_date': 'return_date'
        }

        self._borrower = borrower
        self._book = book
        self._borrowed_date = borrowed_date
        self._return_date = return_date

    @classmethod
    def from_dict(cls, dikt) -> 'BorrowBook':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Borrow_book of this BorrowBook.  # noqa: E501
        :rtype: BorrowBook
        """
        return util.deserialize_model(dikt, cls)

    @property
    def borrower(self):
        """Gets the borrower of this BorrowBook.


        :return: The borrower of this BorrowBook.
        :rtype: str
        """
        return self._borrower

    @borrower.setter
    def borrower(self, borrower):
        """Sets the borrower of this BorrowBook.


        :param borrower: The borrower of this BorrowBook.
        :type borrower: str
        """
        if borrower is None:
            raise ValueError("Invalid value for `borrower`, must not be `None`")  # noqa: E501

        self._borrower = borrower

    @property
    def book(self):
        """Gets the book of this BorrowBook.


        :return: The book of this BorrowBook.
        :rtype: str
        """
        return self._book

    @book.setter
    def book(self, book):
        """Sets the book of this BorrowBook.


        :param book: The book of this BorrowBook.
        :type book: str
        """
        if book is None:
            raise ValueError("Invalid value for `book`, must not be `None`")  # noqa: E501

        self._book = book

    @property
    def borrowed_date(self):
        """Gets the borrowed_date of this BorrowBook.


        :return: The borrowed_date of this BorrowBook.
        :rtype: date
        """
        return self._borrowed_date

    @borrowed_date.setter
    def borrowed_date(self, borrowed_date):
        """Sets the borrowed_date of this BorrowBook.


        :param borrowed_date: The borrowed_date of this BorrowBook.
        :type borrowed_date: date
        """
        if borrowed_date is None:
            raise ValueError("Invalid value for `borrowed_date`, must not be `None`")  # noqa: E501
        if borrowed_date is not None and not re.search(r'([0-9]{4})-(?:[0-9]{2})-([0-9]{2})', borrowed_date):  # noqa: E501
            raise ValueError("Invalid value for `borrowed_date`, must be a follow pattern or equal to `/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/`")  # noqa: E501

        self._borrowed_date = borrowed_date

    @property
    def return_date(self):
        """Gets the return_date of this BorrowBook.


        :return: The return_date of this BorrowBook.
        :rtype: date
        """
        return self._return_date

    @return_date.setter
    def return_date(self, return_date):
        """Sets the return_date of this BorrowBook.


        :param return_date: The return_date of this BorrowBook.
        :type return_date: date
        """
        if return_date is None:
            raise ValueError("Invalid value for `return_date`, must not be `None`")  # noqa: E501
        if return_date is not None and not re.search(r'([0-9]{4})-(?:[0-9]{2})-([0-9]{2})', return_date):  # noqa: E501
            raise ValueError("Invalid value for `return_date`, must be a follow pattern or equal to `/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/`")  # noqa: E501

        self._return_date = return_date
