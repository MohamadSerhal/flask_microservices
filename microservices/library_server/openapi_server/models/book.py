# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class Book(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, authors=None, publisher=None, genre=None, description=None, date_of_release=None):  # noqa: E501
        """Book - a model defined in OpenAPI

        :param name: The name of this Book.  # noqa: E501
        :type name: str
        :param authors: The authors of this Book.  # noqa: E501
        :type authors: List[str]
        :param publisher: The publisher of this Book.  # noqa: E501
        :type publisher: str
        :param genre: The genre of this Book.  # noqa: E501
        :type genre: str
        :param description: The description of this Book.  # noqa: E501
        :type description: str
        :param date_of_release: The date_of_release of this Book.  # noqa: E501
        :type date_of_release: date
        """
        self.openapi_types = {
            'name': str,
            'authors': List[str],
            'publisher': str,
            'genre': str,
            'description': str,
            'date_of_release': date
        }

        self.attribute_map = {
            'name': 'name',
            'authors': 'authors',
            'publisher': 'publisher',
            'genre': 'genre',
            'description': 'description',
            'date_of_release': 'date_of_release'
        }

        self._name = name
        self._authors = authors
        self._publisher = publisher
        self._genre = genre
        self._description = description
        self._date_of_release = date_of_release

    @classmethod
    def from_dict(cls, dikt) -> 'Book':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Book of this Book.  # noqa: E501
        :rtype: Book
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Book.


        :return: The name of this Book.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Book.


        :param name: The name of this Book.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def authors(self):
        """Gets the authors of this Book.


        :return: The authors of this Book.
        :rtype: List[str]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this Book.


        :param authors: The authors of this Book.
        :type authors: List[str]
        """
        if authors is None:
            raise ValueError("Invalid value for `authors`, must not be `None`")  # noqa: E501

        self._authors = authors

    @property
    def publisher(self):
        """Gets the publisher of this Book.


        :return: The publisher of this Book.
        :rtype: str
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this Book.


        :param publisher: The publisher of this Book.
        :type publisher: str
        """

        self._publisher = publisher

    @property
    def genre(self):
        """Gets the genre of this Book.


        :return: The genre of this Book.
        :rtype: str
        """
        return self._genre

    @genre.setter
    def genre(self, genre):
        """Sets the genre of this Book.


        :param genre: The genre of this Book.
        :type genre: str
        """

        self._genre = genre

    @property
    def description(self):
        """Gets the description of this Book.


        :return: The description of this Book.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Book.


        :param description: The description of this Book.
        :type description: str
        """

        self._description = description

    @property
    def date_of_release(self):
        """Gets the date_of_release of this Book.


        :return: The date_of_release of this Book.
        :rtype: date
        """
        return self._date_of_release

    @date_of_release.setter
    def date_of_release(self, date_of_release):
        """Sets the date_of_release of this Book.


        :param date_of_release: The date_of_release of this Book.
        :type date_of_release: date
        """
        if date_of_release is not None and not re.search(r'([0-9]{4})-(?:[0-9]{2})-([0-9]{2})', date_of_release):  # noqa: E501
            raise ValueError("Invalid value for `date_of_release`, must be a follow pattern or equal to `/([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/`")  # noqa: E501

        self._date_of_release = date_of_release
